import random

def ProfileMostProbableKmer(Text: str, k: int, Profile):
    
    maxpr = float('-inf')
    maxkmer = ''

    for i in range(0, len(Text)-k+1):
        patt = Text[i:i+k]

        pr = 1

        for j in range(0, len(patt)):
            if patt[j:j+1] == 'A':
                pr = pr*Profile[0][j]
            
            elif patt[j:j+1] == 'C':
                pr = pr*Profile[1][j]
            
            elif patt[j:j+1] == 'G':
                pr = pr*Profile[2][j]
            
            elif patt[j:j+1] == 'T':
                pr = pr*Profile[3][j]

        if pr > maxpr:
            
            maxpr = pr
            maxkmer = patt


    return maxkmer


def HammingDistance(one: str, two: str):

    mismatch = 0

    for i in range(0, len(one)):
        if not one[i:i+1] == two[i:i+1]:
            mismatch += 1

    return mismatch


def getCount(Motifs):
    count = [[None for y in range(len(Motifs[0]))] for x in range(4)]

    for i in range(len(Motifs[0])):
        Acount = 1
        Ccount = 1
        Gcount = 1
        Tcount = 1

        for m in Motifs:
            if m[i:i+1] == 'A':
                Acount += 1
            elif m[i:i+1] == 'C':
                Ccount += 1
            elif m[i:i+1] == 'G':
                Gcount += 1
            elif m[i:i+1] == 'T':
                Tcount += 1

        count[0][i] = Acount
        count[1][i] = Ccount
        count[2][i] = Gcount
        count[3][i] = Tcount

    return count


def getProfile(Motifs):
    profile = getCount(Motifs)

    for i in range(len(profile[0])):
        Acount = profile[0][i]
        Ccount = profile[1][i]
        Gcount = profile[2][i]
        Tcount = profile[3][i]
        
        sum = Acount + Ccount + Gcount + Tcount

        profile[0][i] = Acount/sum
        profile[1][i] = Ccount/sum
        profile[2][i] = Gcount/sum
        profile[3][i] = Tcount/sum

    return profile


def getConcensus(Motifs):
    concensus = ''

    profile = getProfile(Motifs)

    for i in range(len(Motifs[0])):
        if profile[0][i] == max(profile[0][i], profile[1][i], profile[2][i], profile[3][i]):
            concensus = concensus + 'A'
        
        elif profile[1][i] == max(profile[0][i], profile[1][i], profile[2][i], profile[3][i]):
            concensus = concensus + 'C'
        
        elif profile[2][i] == max(profile[0][i], profile[1][i], profile[2][i], profile[3][i]):
            concensus = concensus + 'G'
        
        elif profile[3][i] == max(profile[0][i], profile[1][i], profile[2][i], profile[3][i]):
            concensus = concensus + 'T'
    
    return concensus


def getScore(Motifs):
    Score = 0
    concensus = getConcensus(Motifs)
    
    for m in Motifs:
        d = HammingDistance(m, concensus)
        Score += d
    
    return Score



#randomly generate a Motif number from the list
def RandomMotif(li, text, k):
    lis = li
    total = 0

    for i in lis:
        total = total + i

    for j in range(len(lis)):
        lis[j] = lis[j]/total

    patterns = []

    for r in range(0, len(text)-k+1):
        patt = text[r:r+k]
        patterns.insert(r, patt)

    Motif = random.choices(patterns, weights = lis)[0]

    return Motif


def getprobability(profile, patt):
    pr = 1
    
    for j in range(0, len(patt)):
        if patt[j:j+1] == 'A':
            pr = pr*profile[0][j]
            
        elif patt[j:j+1] == 'C':
            pr = pr*profile[1][j]
            
        elif patt[j:j+1] == 'G':
            pr = pr*profile[2][j]
            
        elif patt[j:j+1] == 'T':
            pr = pr*profile[3][j]
    
    return pr


# generate a list of probability based on profile 
def getproblist(profile, text, k):
    li = []

    for i in range(0, len(text)-k+1):
        patt = text[i:i+k]
        li.insert(i, getprobability(profile, patt))
    
    return li



def GibbsSampler(Dna, k, t, N):
    RMotifs = []
    for i in range(t):
        num = random.randint(0, len(Dna[i])-k)
        RMotifs.append(Dna[i][num:num+k])
        
    BestMotifs = RMotifs
    
    for j in range(N):
        M = BestMotifs
        a = random.randint(0, t-1)

        #print(a)

        M.pop(a)

        #print(M)

        profile = getProfile(M)

        #Motifj = ProfileMostProbableKmer(Dna[a], k, profile)

        #print(profile)

        probabilitylist = getproblist(profile, Dna[a], k)

        #print(probabilitylist)

        Motifj = RandomMotif(probabilitylist, Dna[a], k)

        #print(Motifj)

        M.insert(a, Motifj)
        
        if getScore(M) < getScore(BestMotifs):
            BestMotifs = M
    
    return BestMotifs


string = 'TACTTAGTGCGCGACTTCACTGGGCTTGCATCTGAGGTTATCACGCATTCAGGTTACAGCATCTTAGGAATCGTCACCTGTTACAATACTACGGCTGCGGTATAGGCTTCCAAATTTCGGTTCCGATGTAAATTGTCTTTTAGCAGGAGAGTGCACTTGAGACCTACTCGCTCATGTATCACTGTCGCCTCTAACAGGTTTACTAACTGAAGCTATGAGATCTAGCATGCTGATATGCCGACACCACGCGGAAAATATGAGCTCTCATGGACAAACTTCGCCCCTTGGCATACGTGAACACGTGCTTAAGGTTCATACTTAGTGCGCGAC TTCACTGGGCTTGCATCTGAGGTTATCACGCATTCAGGTTACAGCATCTTAGGAATCGTCACCTGTTACAATACTACGGCTGCGGTATAGGCTTCCAAATTTCGGTTCCGATGTAAATTGTCTTTTAGCAGGAGAGTGCACTTGAGACCTACTCGCTCATGTATCACTGTCGCCTCTAACAGGTTTACTAACTGAAGCTATGAGATCTAGCATGCCAGTCGCCTGTCAGCTGATATGCCGACACCACGCGGAAAATATGAGCTCTCATGGACAAACTTCGCCCCTTGGCATACGTGAACACGTGCTTAAGGTTCATACTTAGTGCGCGAC AGTACCGTGTAGCCACTCGCACAGTTCACGCGATTGCTACGGGGGTGTTCTTCCCCTCTCACGACGATGCGCACCATACCAACAGCCTGGTTGGCTCTCGAACGCTCAGAGACTCGCGCGCAAGCTCCAGAGTAATATGAGGCACCCCACTTGACTGAACTTAGGGCTTGTACGGTATTAATCGTATGACGCCTCGAACGCCTAATCCATTGCCGTATAATCGTCGATCAAATTCCCGCTACACGTATGACTGTCCGTTTTTCATTATACCGCGTGGGGAGAGCAGATAGGTTTCAAGCAATTGAATACAATTATGCCTGATTTCTGAAA TAGTTTGGAGAAAGGCGATCTTCAAAATACGCGGATCCGACTCCAACAGCCCCCCAGGGGTATCTCGTCCTAAAACGCTAGTTGCCTCGTCACTTGCGGTGCCGGAAGGGTGTGTCACACTTAAGAAGTAGTACAGTCTTAATTTACCTCTTGTGCGGCCGGCCAACTTCTAGGTCAACTGCGCCATGAACAAGCCCTGTTCTCGGCCTCAAGCGCGGACCTCGCATGACCGCCCGGCTTATCCTAACTCCAGAATCCTAGCGCAGGGATGAACCCCTGCGCCAGGATTACGTGCTGGATCACAGGTCCGGTGTTGTTTGATATCCGGGT GGTACAGCCCGGAACCACTCGGAGGATTTTGACTTCCTTTAAATTTTGGGCTGCTTAGAATCATGGATTTGGAGCCTTGTCTTTCCCGTTTATGGTTAGGCAACATATGCCCTGTTAGTAAAGGTTTCTACACACGGGGTGATTCCTCTACGAGCTAGAATGCAAAGGAGTCTATTCTGGGGCCCTGAGTTAGGACCAAATCTCCTAGACGGATTTTCCCAACGACGATCCATAACCAACCACATATGCCCAGGCTTCGATGAAACCCTTCACAAGGTAGTCCAACCAACTGTCAGCTTCGGCACGTTCCACGGAGGGGAAGGAACTTGC TTGCTAGCGTTGGTGTTTTAACTACATTGGAGCCTACACTTGCTACTATTGCGGAACTCAATGTGACTCAGATTCTAGAATCTAAAACCGTGCCATAGTACGGTAGATGTAGACGCGCGTCCCTATTCCACCGCGATGTAGCAAATATGAGACTTAGGGGCTAAATTCCGGCCACAGATAGTATGGTCTGGACCCACCGTCGGTATTGGCCAACAGGTAGTCAGCACGGTAGAATGAAGGTGTAAGTATTTTCAGCTACCTGGACATATAACCGCGGACCAGAACGTGCCGCATGGAGACTGGACCCCTAATAATGTCTTGCAGTCCGAC CTACGCTAACGCTCTAACTTCACTATTATGAGCCGGGACTCAGCTCCTTACTCCGTAGCCACTGAATACAGCCTGTCAGAAGCCGCTCACATACGTCCCTTAGCTTGCAGCCATCAGTGGCACTAGTCTAACGACGTTACGTATCGCCTACTTCATGTAGTAATGGTATCAAAGGTCAAGGTGCAAAGAAAAATGGTGCGCAGTTGCGCGCTTGAGGTCATGTAGTCCGTGCAACCGACAAAATGTTGAGCGGAGTCCTTGAACCGAGCAATAGTAGGCTGCCTATCGACGCGTGTGACAGTGTGCAAGCCGCATCTTAAGATACACTAC CAAACTCCGCGGGGGACCGCCAGGGAGTCCTTGCGCGTGATTAATAACGGGATTTTTCTCGATGTCTATCGGGCGGCGCTACCAAGTCGTGTGTTACCAACAGCCTGTAGACTAACACAAGCGAGCTAAAGGAACTGAACGACCCCGCCCTAGATTTTCTACGGGTTAGGTCTGGAATCGAATTTGAATCCCAGCCGTAGTGGTACCTACGTGGTATGCTTCCGCGTTCGTACGGATGCGACTTTTGCCTATACCTATCTTTGTCGAGCATGACCGGTCGGGTCAAATCGCAATTGATGTTTGCTGAGTGATGCTAAGACTGCAAGGAGA ATACCAATTGATCGAGGGGAGTTTTTTCAACAGCCTGTCGTACCGTGACCAATTTACGAGTACCGCAAGAGCCTTCCGCGGCCGCCGGCAGGCCGCTGAAACACACCAGAGGATCATCGGGGGGAATTCAGTTGAAAGTAAGCCGTCTCGGTACCTCATTCACCAGGTTGAGGATACTGATAGCGGACGTCATATCACCAGTCTTATGTTTTCAGAGGGTACGTTTCCCCTTAGGACGGCTTATAATGAGAGGCTTATCCCACCTTCAACCGCTTTTGCACAGGGTATGGGCACAGCGTAATGCACTGCTTGGAATGGGGCACTTAACAT CTGCACTAGTCTTGACATCTAGATACTCACGAAGTCGCGGGCGCGTGTTGAGCAGCCCAGCAACCGGCAGTGGTTCTATGGTCTGTCTTAGATTGCTGACAAAGCAAATAAGGATAGGGTCGAGTGCTACCGTGGCGGTCTGTAGAGGTTGCTGTATTAGCCTCATAGCCCTCAGGGTCGACATTTAAGGTTATAGCTCTTTACTGAAGCTCGGTGAACCCCGTCAGAGTGAACCACACCAACAAAGTGTCAGGGCAGATCTTCTGAGTGTAGCCAGAGGTCGCCTAGCCACTATAGCCTTAAGATACGTACGGGGAGTTTCAATCAATG TTCGGCTCAAAGTTAGACTGGGTGAGGAAACACGAGACGGTCCAGCGCCTGTTAGGCTCCTTGGATAGCTACTAGGGGACGACCTAGGGAGTATTAACCTGACAACATTCAGTGGCTGACCCAAACGAATGCCGAACTAGAATATATCTTCACGTTGTGAAAGGCAAAGGTTGGTCCCGAGCGGCAATAGGATAAGGCTTACACGCTTTGTGAAACACCGCGGAGTAATGTCTGACTTTTTTTTGTTCGGCATCGTGTATGAAGGTATTTTGCTTTTATGTATGGAACAAACTGGTCGATCGGCCAGCCTGTCAGACTCTTTAGGGGGTT ACTACGTTTGGCTGGTATACGCAGCTTCAGATTTATCATTCAACTACCAGTGGGATCCCGTTGTAGGCGCCTCATAAGGGTGACAGTGAGGTCCGTCTTAACGGTGGCGCCGAAGCCACAGCACTCGTCCTTACTAGTAGTTGTTCGCCAATGTCCTGTCAGCTACATGGATACGTCAACAGTAACACCTAGTGTTTCGCATGTCACGGAAGATCGCATAGTGCACCCCCACGTTGCGACTCTATTGCGTAACACATAAAAACACTGGTTCCGTAGCTAACTCGGGAAGGCACGTCATATCGTCTGATGGCAAAAGAGAAAAGGCTGAAC ATACCCGACAGATAGTTAAGCAAAATGCTCGTCAATGTGTCGAGACAAGTCGGCTTTCATGTGATTTATCAAAATCTCGCCTCGGACTCCCTATAGACGGGCGGCGGACCCACCGGTCGAGTGCGCGTAACTACTCGTATACGCTACCTCATTGTAGTTCCGTAATGCGAAGACAGACCCGTCCTACAGTTTATTACACGTTCGGGGTGATAGTCTTGGTGATCCAACAATTTGTCAGCTGGTAGGTGATCAACTCTTTCCGCGATCAGGCGGTCGTCGTACTAGAGTTTGACCACCACGACAGTGAAACATTAGGGTTCGTGGCCGTGA TGCCTGTAACGGCAGGCCCTCTCAGTGGGTCGTCTAAGTACTATTTCTTCCATCTACTCAACATCCCACGCGAAAGACGGATCCTACAGATGACAGCTATTAAGACGAGGCCTCCACTGATAGCAGCCGAACCTTTGCTGCTTCGACTCACCTGATTGTGATTGGAGACGCCCCAATCGGCGTCGCTGTAATAACGGATGTACGCTTGGGTGACGAAAGTGAGCCTATGAAGCTTAAGCCTGTCCATCTACCACCTATAGTATGGTGACCACGCTAAGTTTCAAGCCATCATAAGGCGCAGCCAACAGCACTTCAGATCTTCGTCTACTA ATTACTGCTGTATCATATAGCTCTCGTCAACAATATGGACAACGCAGAGATTACAGGAACAACCCAGCGATTACCCCGCAATCGAGACCTCGGTTGCATGGGAGACGTATCAGCTCCTGCACTTCGCGAGTGACTCTCCGACCGCGCTGATAGGTGGGCCACGTTCAGTAATTAGGGAACTTGGGGAACGGTGACGTTCCGTTTATAGGCCCACTTGCCTGTCAGTCCGTCTCCACTGTAACTGTGGGTCTTCGTCCTCTCTTGGCCCCTCACATACATAGCAGGCGCTGTATCCGAAGCGGCGTGCTGGGTGCTCAACGTTATTTCGCA GGGACCGCTGGATAGCAGTACTGTCCCGCATATCGCTGGATCGTAATGGGGTCGATCTGCTTCGACCGATTCCGACTGAAATTACGACAGAGAGAATGTATTACCAAGCCATAGATGTACCCGTGATCTGTGCAGGGAAACTGCTATTCACAGTGGTAAATGGGTCCTTGGCGTTAATGCAGTCAGAGCATCCTTCCCAATCACTTACCCAGAAGAACAGGCAACACTTTTGTAGGGTAACGACCTGGAGCCTGTCAGACGGTTGAAAAACCTTCACGCCTAGCACGGGGAGCTGCCATGCGTGCTCGTCCGGGAAAAGAGAACGTATGG ACACAAGGAATTCATTTGATCCTCCCTGAGGCACTTGATCCGACGTCCTTAGGCTGTTTTTTGAGTCATTTGGCGTCAACGTTGGGATCCACTCCGAGCTGCATAGGAGAAATGCTTACACCTTCAGGGGGGAATGCCATCCAACAGCCTAAGAGGACATAAAAGTCCGAGATGAATCTTACCAAATTACCAGAAACTTGACCTCGACCCACACTTATGAGGTAGAAGGGAGATGTGCCTCCAACCAGTCTAGCTAGGATGGGAGATCACGAGAGCGATTGGCTCGTGCATGGCCGCGCGCTTTTTAGCGCGAACCGGTTTTCTATGCCA TTAAATCATGCAGTCGCTGGCTTGTTCGTCAATTCATAGCCTCGGACGTGTCTTATCCGCTGTTATTTTCACGCCTCGACTGCAGCACACGAATCACGTAATGTTGAACCTTACAGTACACCAGTTGTTCCTCACAATGTTTGGAATTTACAAGCCTTCAATAGACTGGCCCCTAGTTTTCCAACGTGCTGTCAGCATAAAATGTCAGGAATCCATTCATCCTAGCAGGACATGATTTAGTGCAAGTCATACGGCGCCGTTATCATGATTTGGTTTACGTGGAGGGACACGGACAGCTATTATTACTGCGGCCAGCTCAATGGTCATGTA GTATTGTAACGAGCACCCCCGCGTCAATACCTTGTGGGGAAACTATTAGAACAGCCTGTCACGTGCATGTTTGCGGTTAGGGGCGCACCATTTCAACCGACGTGGGCGCCTTCTTCGCGTGCTTTCTCGACGTGCTGGACCAAGCGCATACTCACAACGTAATTCACGCGTGGTATTGGAGCAAGGGTAATGAACGCGGCGCAAGCAGGTTACGAGTTTCTCTGCGAGTCCTTCACCGTTAAGCAAACGATGGCTCCCTTTTCGCTACGCCCCCATGAGGTACACGTTGCTTTATAGGCTGTGCCCCGCAGCGGGCGGCGGCAGCGGTCC TATGTGAATCTACATTGCCAGAAATGAGAGCTGGCTGCCCATGGCTGCAAATAGCAAGTACTCCCGTGCCGTCTATGCCTGCTGTGTAATACCACAGTCTTCCTAACTGACGAAGCCAGGCAGATTATTGGTCTTGCTGAATACCCTGGACTGAACACCAGAGACCGGTGAGGAATGCGACCTTCGACTGAAGTTTATTGTTTCAATTTCCTGATATGATAAGAAAGATCATAAGTGAATGCCTTCCCGCGCCTTCCAACTCAGTGCTCCAATGTCCTGTCAGCAGTAGCCTACCGTAGTAAGGTCACTGCCGTCCGCGCCTGGCGCCTC'

Dna = string.split()

result = GibbsSampler(Dna, 15, 20, 2000)

for r in result:
    print(r, end=' ')

print(getScore(result))

